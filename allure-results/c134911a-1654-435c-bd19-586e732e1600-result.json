{"name": "test_issues_find", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 15.0s, while waiting for:\nbrowser.element(('css selector', '.header-search-button')).click\n\nReason: ElementNotInteractableException: element not interactable\n  (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nScreenshot: file://C:\\Users\\RMX\\.selene\\screenshots\\1756062561793\\1756062561795.png\nPageSource: file://C:\\Users\\RMX\\.selene\\screenshots\\1756062561793\\1756062561795.html", "trace": "fn = <selene.core.wait.Command object at 0x00000245199FDC70>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n                       ^^^^^^^^^^^^^^^\n\n.venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selene\\core\\wait.py:61: in __call__\n    return self._fn(entity)\n           ^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selene\\core\\entity.py:525: in raw_click\n    element.locate().click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000024519A29BE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff74d1bdf78+10968]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff88f577374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ff88ffbcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff74d4678d5+2802741]\nE       \tGetHandleVerifier [0x0x7ff74d1ceb70+79568]\nE       \t(No symbol) [0x0x7ff74cf6bf2c]\nE       \t(No symbol) [0x0x7ff74cfc3f94]\nE       \t(No symbol) [0x0x7ff74cfb5bb8]\nE       \t(No symbol) [0x0x7ff74cfeac8a]\nE       \t(No symbol) [0x0x7ff74cfb5466]\nE       \t(No symbol) [0x0x7ff74cfeaea0]\nE       \t(No symbol) [0x0x7ff74d012e24]\nE       \t(No symbol) [0x0x7ff74cfeaa63]\nE       \t(No symbol) [0x0x7ff74cfb3c91]\nE       \t(No symbol) [0x0x7ff74cfb4a23]\nE       \tGetHandleVerifier [0x0x7ff74d492ced+2979917]\nE       \tGetHandleVerifier [0x0x7ff74d48d0f3+2956371]\nE       \tGetHandleVerifier [0x0x7ff74d4aacbd+3078173]\nE       \tGetHandleVerifier [0x0x7ff74d1e836e+184014]\nE       \tGetHandleVerifier [0x0x7ff74d1f024f+216495]\nE       \tGetHandleVerifier [0x0x7ff74d1d70c4+113700]\nE       \tGetHandleVerifier [0x0x7ff74d1d7279+114137]\nE       \tGetHandleVerifier [0x0x7ff74d1bdf78+10968]\nE       \tBaseThreadInitThunk [0x0x7ff88f577374+20]\nE       \tRtlUserThreadStart [0x0x7ff88ffbcc91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_issues_find():\n        # Динамические лейблы Allure\n        allure.dynamic.feature(\"Issues в репозитории GitHub\")\n        allure.dynamic.story(\"Поиск задач в чужом публичном репозитории\")\n        allure.dynamic.severity(Severity.CRITICAL)\n        allure.dynamic.tag(\"web\", \"github\", \"search\")\n        allure.dynamic.link(\"https://github.com/eroshenkoam/allure-example\", name=\"Репозиторий examples\")\n    \n        # Откройте главную страницу GitHub\n        browser.open(\"https://github.com\")\n    \n        # 🔧 ДЕБАГ: Сохраняем скриншот и исходный код перед кликом\n        browser.save_screenshot('before_click.png')  # Исправлено на save_screenshot\n        with open('page_source_before_click.html', 'w', encoding='utf-8') as f:\n            f.write(browser.driver.page_source)\n    \n        # Пробуем кликнуть\n        browser.element('.header-search-button').click()\n    \n        # 🔧 ДЕБАГ: Сохраняем скриншот и исходный код после клика\n        browser.save_screenshot('after_click.png')  # Исправлено на save_screenshot\n        with open('page_source_after_click.html', 'w', encoding='utf-8') as f:\n            f.write(browser.driver.page_source)\n    \n        browser.open(\"https://github.com/home\")\n        browser.driver.maximize_window()\n>       s(\".header-search-button\").click()\n\ntest_dynamic_labels.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selene\\core\\entity.py:540: in click\n    self.wait.for_(\n.venv\\Lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x00000245199FDC70>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 15.0s, while waiting for:\nE                   browser.element(('css selector', '.header-search-button')).click\nE                   \nE                   Reason: ElementNotInteractableException: element not interactable\nE                     (Session info: chrome=139.0.7258.139); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementnotinteractableexception\nE                   Screenshot: file://C:\\Users\\RMX\\.selene\\screenshots\\1756062561793\\1756062561795.png\nE                   PageSource: file://C:\\Users\\RMX\\.selene\\screenshots\\1756062561793\\1756062561795.html\n\n.venv\\Lib\\site-packages\\selene\\core\\wait.py:148: TimeoutException"}, "start": 1756062561824, "stop": 1756062582285, "uuid": "b1218784-1a89-46d9-b30f-7b650cc634a0", "historyId": "f5b7c29a216c12a2f059678d64e7dd6e", "testCaseId": "f5b7c29a216c12a2f059678d64e7dd6e", "fullName": "test_dynamic_labels#test_issues_find", "labels": [{"name": "feature", "value": "Issues в репозитории GitHub"}, {"name": "story", "value": "Поиск задач в чужом публичном репозитории"}, {"name": "severity", "value": "critical"}, {"name": "tag", "value": "web"}, {"name": "tag", "value": "github"}, {"name": "tag", "value": "search"}, {"name": "suite", "value": "test_dynamic_labels"}, {"name": "host", "value": "KOMPUTER"}, {"name": "thread", "value": "3076-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_dynamic_labels"}], "links": [{"type": "link", "url": "https://github.com/eroshenkoam/allure-example", "name": "Репозиторий examples"}], "titlePath": ["test_dynamic_labels.py"]}